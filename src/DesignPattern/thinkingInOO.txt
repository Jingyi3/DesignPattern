封装 继承 多态
站在使用者的角度考虑需求
修改而不是添加，有很好的课扩展性

1. 考虑类
    需求中的【名词】，考虑有的名词应该是属性不一定是类。
2. 属性
    private 定义
    public get set方法访问这个属性
3. 方法
    谁是主语，方法封装在哪个类里面
4. 类和类之间的关系
5. 隐藏（封装）
    降低耦合度：彼此独立运行，不互相羁绊
6. 继承
    xxx是一种xxx，可以考虑继承，但是耦合度非常强，需要谨慎使用
7. 多态--核心；可扩展性wxtensibility
    继承，重写，父类的引用指向子类的对象
    抽象类{抽象方法（参数）并不实现}
    继承抽象类的需要实现抽象方法
    不同的事物设计成抽象类，不同的能力设计成接口


使用接口类型 定义 大概是视线了多态把